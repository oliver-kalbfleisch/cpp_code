cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
set(CMAKE_LEGACY_CYGWIN_WIN32 0)
project(tracker C CXX )
if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
set(CMAKE_CXX_FLAGS "-Wall -Wextra")
set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")
endif(NOT CMAKE_BUILD_TYPE)
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" OR
   "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	set(warnings "-Wall -Wextra -Werror")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC" )
	set(warnings "/W4 /WX /EHsc")
endif()
if (NOT CONFIGURED_ONCE)
	set(CMAKE_CXX_FLAGS "${warnings}"
	CACHE STRING "Flags used by the compiler during all build types" FORCE)
	set(CMAKE_C_FLAGS "${warnings}"
	CACHE STRING "Flags used by the compiler during all build types." FORCE)
endif()
set(raspicam_DIR "/home/pi/Desktop/cpp_dev/git/cpp_code/cpp_dev/opencv/raspicam-0.1.6/build")
set(Boost_DIR "/home/pi/Desktop/cpp_dev/opencv/boost/boost_1_66_0")
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost 1.62.0 REQUIRED COMPONENTS system thread program_options)
find_package(raspicam REQUIRED)
find_package(OpenCV REQUIRED)
IF (OpenCV_FOUND AND raspicam_FOUND AND Boost_FOUND)
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${Boost_INCLUDE_DIRS})
add_subdirectory(trackingCore)
add_executable(tracker main.cpp)
set_property(TARGET tracker PROPERTY CXX_STANDARD 14)
target_link_libraries(tracker trackingCore)
target_link_libraries(tracker ${raspicam_CV_LIBS})
target_link_libraries(tracker ${Boost_LIBRARIES})
ELSE()
MESSAGE(FATAL_ERROR "External Libs could not be loaded")
ENDIF()
set(CONFIGURED_ONCE TRUE CACHE INTERNAL "A flag showing that CMake has configured at least once")
