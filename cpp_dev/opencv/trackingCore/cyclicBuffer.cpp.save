
template<class T>
class circular_buffer{
public:
	circular_buffer(size_t size):
		buf_(std:unique_ptr<T[]>(new T[size]),
		size_(size)
{
//empty constructor
}
void put(T item)
{
std::lock_guard<std::mutex> lock(mutex_)
buf_[head_]=item;
head_=(head_+1)&size_;
if(head_== tail_)
{ 
tail_=(tail_+1)%size_%;
}
}
T get(void)
{
#include <iostream>
#include <ctime>
#include <cstdlib>
#include <chrono>
}
void reset(void)
//reset buffer, at start head abnd tail pos are equal
{
std::lock_guard<std:mutex> lock(mutex_);
head_=tail_;
}
bool empty(void);
bool full(void);
size_t size(void);
private:

std::mutex mutex_;
std::unique_ptr<T[]> buf_;
size_t head_=0;
size_t tail_=0;
size_t size_;
};
